{"version":3,"file":"static/js/789.e5737537.chunk.js","mappings":"8HACA,QAA+B,4B,8ICsB/B,MAAMA,EAA+B,CACnC,CACEC,KAAM,qBACNC,YAAa,gEACbC,SAAUA,OACVC,KAAM,OACNC,WAAY,CAACC,EAAAA,GACbC,KAAM,SAER,CACEN,KAAM,uCACNC,YAAa,kFACbC,SAAUA,OACVC,KAAM,WACNC,WAAY,CAACC,EAAAA,EAAiBE,EAAAA,GAC9BD,KAAM,YAER,CACEN,KAAM,uCACNC,YAAa,8FACbC,SAAUA,OACVC,KAAM,WACNC,WAAY,CAACC,EAAAA,EAAiBE,EAAAA,ECzCXC,CACrBC,EACAC,KAEO,CACLC,OAAQF,IAAeC,EACvBE,QAASH,IAAeC,EARV,0IAQoC,MDoClDJ,KAAM,kBAuFV,EAnF+BO,KAC7B,MAKOC,EAAeC,IAAkBC,EAAAA,EAAAA,WAAS,IAC1CC,EAAQC,IAAWF,EAAAA,EAAAA,WAAS,IAC5BG,EAAkBC,IAAoBJ,EAAAA,EAAAA,WAAS,IAE/CK,EAAWC,EAASC,IAAiBC,EAAAA,EAAAA,KAEtCC,EAA6B,CACjCC,QAASA,KACPR,GAAQ,EAAK,EAEfS,WAAYA,KACVT,GAAQ,GACR,MAAMU,EAAa,CACjBC,MAAOR,EAAUQ,MACjBC,SAAUT,EAAUS,UAEtBC,EAAAA,EAAMC,UAASC,EAAAA,EAAAA,IAAaL,IAC5BM,EAAS,KACTC,GAAO,EAETC,SAAUA,KACRlB,GAAQ,GACRH,GAAe,GACfoB,GAAO,IAGJE,EAAeC,EAAiBH,IAASI,EAAAA,EAAAA,GAC9ClB,EACAmB,EAAAA,GAAYC,aACZhB,GAGIS,GAAWQ,EAAAA,EAAAA,MAajB,OALAC,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAWtB,EAAQO,OAASP,EAAQQ,UAAYR,EAAQuB,cAC9DzB,GAAkBwB,EAAS,GAC1B,CAACtB,EAAQO,MAAOP,EAAQQ,SAAUR,EAAQuB,iBAG3CC,EAAAA,EAAAA,MAAA,QAAMC,UAAWC,EAAmBC,SAAA,EAClCC,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,OAnDG,qEAmDgBH,SAC5BlD,EAAUsD,KAAI,CAACC,EAAOC,KACrBL,EAAAA,EAAAA,KAACM,EAAAA,EAAU,CACTxD,KAAMsD,EAAMtD,KACZC,YAAaqD,EAAMrD,YACnBE,KAAMmD,EAAMnD,KACZD,SAAUqB,EACVnB,WAAYkD,EAAMlD,WAClBE,KAAMgD,EAAMhD,KACZmD,WACiB,kBAAfH,EAAMhD,KAA2Be,EAAUS,SAAW,IAEnDyB,QAIXL,EAAAA,EAAAA,KAACQ,EAAAA,EAAM,CACL1D,KAnEW,qGAoEXE,SAAUoC,EACVqB,SAAUxC,KAEZ+B,EAAAA,EAAAA,KAACQ,EAAAA,EAAM,CAAC1D,KAtEQ,qEAsEWE,SAnCA0D,KAC7B1B,EAAS,SAAS,IAmCfjB,IAAUiC,EAAAA,EAAAA,KAACW,EAAAA,EAAM,CAAC7D,KAAI,GAAA8D,OA1EV,iJA0EuB,SACnChD,IACCoC,EAAAA,EAAAA,KAACa,EAAAA,EAAS,CAACC,MAAO3B,EAAenC,SAnClB+D,KACnBlD,GAAe,EAAM,MAoCd,C","sources":["webpack://rs-chat/./src/view/auth/registration/style.module.css?cacd","view/auth/registration/Registration.tsx","view/shared/field-named/validator/equal-validator.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"registration\":\"style_registration__22Wwr\"};","import style from './style.module.css';\nimport { useNavigate } from 'react-router-dom';\nimport Button from '../../shared/button/Button';\nimport React, { useEffect, useState } from 'react';\nimport { FieldGroup } from '../../shared/field-group/Field-group';\nimport {\n  FieldNamed,\n  FieldNamedProps,\n} from '../../shared/field-named/Field-named';\nimport { lengthValidator } from '../../shared/field-named/validator/length-validator';\nimport { caseValidator } from '../../shared/field-named/validator/case-validator';\nimport { equalValidator } from '../../shared/field-named/validator/equal-validator';\nimport { Waiter } from '../../shared/waiter/waiter';\nimport { store } from '../../../store/store';\nimport { User, registration } from '../../../store/actions/user-actions';\nimport { ModalInfo } from '../../shared/modal-info/modal-info';\nimport { useInputChange } from '../../custom-hook/use-input-change';\nimport {\n  AuthCallback,\n  useAuthorization,\n} from '../../custom-hook/use-authorization';\nimport { UserActions } from '../../../store/constants/action-constants';\n\nconst fieldList: FieldNamedProps[] = [\n  {\n    text: 'Имя',\n    placeholder: 'Введите имя',\n    callback: () => {},\n    type: 'text',\n    validators: [lengthValidator],\n    name: 'login',\n  },\n  {\n    text: 'Пароль',\n    placeholder: 'Введите пароль',\n    callback: () => {},\n    type: 'password',\n    validators: [lengthValidator, caseValidator],\n    name: 'password',\n  },\n  {\n    text: 'Пароль',\n    placeholder: 'Повторите пароль',\n    callback: () => {},\n    type: 'password',\n    validators: [lengthValidator, caseValidator, equalValidator],\n    name: 'passwordCheck',\n  },\n];\n\nconst Registration: React.FC = () => {\n  const waitText = 'Регистрация пользователя...';\n  const headerText = 'Регистрация';\n  const authText = 'Войти в приложение';\n  const toLoginText = 'Авторизация';\n\n  const [isShowMessage, setShowMessage] = useState(false);\n  const [isWait, setWait] = useState(false);\n  const [isDisabledButton, setDisableButton] = useState(true);\n\n  const [userValue, isValid, changeHandler] = useInputChange();\n\n  const authCallback: AuthCallback = {\n    pending: () => {\n      setWait(true);\n    },\n    fullfilled: () => {\n      setWait(false);\n      const user: User = {\n        login: userValue.login,\n        password: userValue.password,\n      };\n      store.dispatch(registration(user));\n      navigate('/');\n      reset();\n    },\n    rejected: () => {\n      setWait(false);\n      setShowMessage(true);\n      reset();\n    },\n  };\n  const [messageResult, authSendHandler, reset] = useAuthorization(\n    userValue,\n    UserActions.REGISTRATION,\n    authCallback\n  );\n\n  const navigate = useNavigate();\n  const redirectToLoginHandler = () => {\n    navigate('/login');\n  };\n  const disableModal = () => {\n    setShowMessage(false);\n  };\n\n  useEffect(() => {\n    const isEnable = isValid.login && isValid.password && isValid.passwordCheck;\n    setDisableButton(!isEnable);\n  }, [isValid.login, isValid.password, isValid.passwordCheck]);\n\n  return (\n    <form className={style.registration}>\n      <FieldGroup header={headerText}>\n        {fieldList.map((field, index) => (\n          <FieldNamed\n            text={field.text}\n            placeholder={field.placeholder}\n            type={field.type}\n            callback={changeHandler}\n            validators={field.validators}\n            name={field.name}\n            valueEqual={\n              field.name === 'passwordCheck' ? userValue.password : ''\n            }\n            key={index}\n          />\n        ))}\n      </FieldGroup>\n      <Button\n        text={authText}\n        callback={authSendHandler}\n        disabled={isDisabledButton}\n      />\n      <Button text={toLoginText} callback={redirectToLoginHandler} />\n      {isWait && <Waiter text={`${waitText}...`} />}\n      {isShowMessage && (\n        <ModalInfo texts={messageResult} callback={disableModal} />\n      )}\n    </form>\n  );\n};\n\nexport default Registration;\n","import { ValidationResult } from '../../../custom-hook/use-validation';\n\nconst errorText = 'Повторный пароль не верен';\n\nconst equalValidator = (\n  valueFirst: string,\n  valueSecond: string\n): ValidationResult => {\n  return {\n    result: valueFirst === valueSecond,\n    message: valueFirst !== valueSecond ? errorText : '',\n  };\n};\n\nexport { equalValidator };\n"],"names":["fieldList","text","placeholder","callback","type","validators","lengthValidator","name","caseValidator","equalValidator","valueFirst","valueSecond","result","message","Registration","isShowMessage","setShowMessage","useState","isWait","setWait","isDisabledButton","setDisableButton","userValue","isValid","changeHandler","useInputChange","authCallback","pending","fullfilled","user","login","password","store","dispatch","registration","navigate","reset","rejected","messageResult","authSendHandler","useAuthorization","UserActions","REGISTRATION","useNavigate","useEffect","isEnable","passwordCheck","_jsxs","className","style","children","_jsx","FieldGroup","header","map","field","index","FieldNamed","valueEqual","Button","disabled","redirectToLoginHandler","Waiter","concat","ModalInfo","texts","disableModal"],"sourceRoot":""}