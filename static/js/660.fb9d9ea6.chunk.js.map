{"version":3,"file":"static/js/660.fb9d9ea6.chunk.js","mappings":"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","sources":["webpack://rs-chat/./src/view/main/style.module.css?ec25","view/main/header/style.module.css","view/main/header/header.tsx","webpack://rs-chat/./src/view/main/footer/style.module.css?2100","view/main/footer/footer.tsx","webpack://rs-chat/./src/view/main/contacts/style.module.css?21a7","webpack://rs-chat/./src/view/main/contacts/user-contact/style.module.css?6746","view/main/contacts/user-contact/user-contact.tsx","webpack://rs-chat/./src/view/main/contacts/user-list/style.module.css?ab07","view/main/contacts/user-list/user-list.tsx","view/main/contacts/contacts.tsx","webpack://rs-chat/./src/view/main/dialog/dialog-content/style.module.css?0f15","webpack://rs-chat/./src/view/main/dialog/dialog-message/style.module.css?01e7","view/main/dialog/dialog-message/dialog-message.tsx","core/services/set-readed.ts","view/main/dialog/dialog-content/dialog-content.tsx","webpack://rs-chat/./src/view/main/dialog/dialog-header/style.module.css?839b","view/main/dialog/dialog-header/dialog-header.tsx","webpack://rs-chat/./src/view/main/dialog/dialog-input/style.module.css?69d3","view/main/dialog/dialog-input/dialog-input.tsx","webpack://rs-chat/./src/view/main/dialog/style.module.css?39c3","view/main/dialog/dialog.tsx","webpack://rs-chat/./src/view/main/content/style.module.css?1419","view/main/content/content.tsx","view/main/Main.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"main\":\"style_main__16KWY\"};","// extracted by mini-css-extract-plugin\nexport default {\"header\":\"style_header__PlMnG\"};","import { useSelector } from 'react-redux';\nimport { UserActions } from '../../../store/constants/action-constants';\nimport {\n  AuthCallback,\n  useAuthorization,\n} from '../../custom-hook/use-authorization';\nimport Button from '../../shared/button/Button';\nimport style from './style.module.css';\nimport { RootState, store } from '../../../store/store';\nimport { useNavigate } from 'react-router-dom';\nimport { logout } from '../../../store/actions/user-actions';\n\nexport const Header: React.FC = () => {\n  const headerText = 'RS-Chat';\n  const userText = 'Пользователь: ';\n  const buttonText = 'Выход';\n\n  const user = useSelector((store: RootState) => store.users.userCurrent);\n  const navigate = useNavigate();\n\n  const authCallback: AuthCallback = {\n    pending: () => {},\n    fullfilled: () => {\n      store.dispatch(logout());\n      navigate('/login');\n    },\n    rejected: () => {},\n  };\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const [messageResult, authSendHandler, reset] = useAuthorization(\n    user,\n    UserActions.LOGOUT,\n    authCallback\n  );\n\n  return (\n    <section className={style.header}>\n      <label>\n        {userText}\n        {user.login}\n      </label>\n      <label>{headerText}</label>\n      <Button text={buttonText} callback={authSendHandler} small={true} />\n    </section>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"footer\":\"style_footer__ULGny\"};","import style from './style.module.css';\n\nexport const Footer: React.FC = () => {\n  return (\n    <section className={style.footer}>\n      <label>RSSchool</label>\n      <label>MikAleinik</label>\n      <label>2023</label>\n    </section>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"contacts\":\"style_contacts__HfViV\",\"search\":\"style_search__SEAlv\"};","// extracted by mini-css-extract-plugin\nexport default {\"user-contact-container\":\"style_user-contact-container__W+gz4\",\"user-status\":\"style_user-status__vBNSG\",\"active\":\"style_active__qWs-k\",\"user-login\":\"style_user-login__aILzc\",\"user-messages\":\"style_user-messages__TRTGI\"};","import { selectUser } from '../../../../store/actions/dialog-actions';\r\nimport { store } from '../../../../store/store';\r\nimport style from './style.module.css';\r\nimport React from 'react';\r\n\r\ntype UserContactProps = {\r\n  login: string;\r\n  active: boolean;\r\n  messages: number;\r\n};\r\n\r\nexport const UserContact: React.FC<UserContactProps> = ({\r\n  login,\r\n  active,\r\n  messages = 0,\r\n}) => {\r\n  const clickHandler = () => {\r\n    store.dispatch(selectUser(login));\r\n  }\r\n\r\n  return (\r\n    <li className={style['user-contact-container']} onClick={clickHandler}>\r\n      <div\r\n        className={\r\n          active\r\n            ? `${style['user-status']} ${style['active']}`\r\n            : style['user-status']\r\n        }\r\n      ></div>\r\n      <label className={style['user-login']}>{login}</label>\r\n      {(messages !== 0) && <label className={style['user-messages']}>{messages}</label>}\r\n    </li>\r\n  );\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"user-list\":\"style_user-list__ZzQiZ\"};","import { useSelector } from 'react-redux';\nimport { RootState } from '../../../../store/store';\nimport { UserContact } from '../user-contact/user-contact';\nimport style from './style.module.css';\nimport React from 'react';\nimport { Dialog } from '../../../../store/actions/dialog-actions';\n\ntype UserListSearch = {\n  search: string;\n};\n\nconst getCountMessage = (login: string, dialogs: Dialog[]): number => {\n  let result = 0;\n\n  dialogs.forEach((dialog) => {\n    if (dialog.login === login && Array.isArray(dialog.messages)) {\n      dialog.messages.forEach((message) => {\n        if (message.from === login && message.status.isReaded === false) {\n          result += 1;\n        }\n      });\n    }\n  });\n\n  return result;\n};\n\nexport const UserList: React.FC<UserListSearch> = ({ search }) => {\n  const usersCurrent = useSelector(\n    (store: RootState) => store.users.userCurrent.login\n  );\n  const usersActive = useSelector(\n    (store: RootState) => store.users.usersAnother.active\n  );\n  const usersInActive = useSelector(\n    (store: RootState) => store.users.usersAnother.inactive\n  );\n  const dialogs = useSelector((store: RootState) => store.dialog.messages);\n\n  return (\n    <ul className={style['user-list']}>\n      {usersActive.map(\n        (login, index) =>\n          login !== usersCurrent &&\n          login.indexOf(search) !== -1 && (\n            <UserContact\n              login={login}\n              active={true}\n              messages={getCountMessage(login, dialogs)}\n              key={index}\n            />\n          )\n      )}\n      {usersInActive.map(\n        (login, index) =>\n          login.indexOf(search) !== -1 && (\n            <UserContact\n              login={login}\n              active={false}\n              messages={getCountMessage(login, dialogs)}\n              key={index}\n            />\n          )\n      )}\n    </ul>\n  );\n};\n","import { useState } from 'react';\r\nimport style from './style.module.css';\r\nimport { UserList } from './user-list/user-list';\r\n\r\nexport const Contacts: React.FC = () => {\r\n  const placeholderText = 'Поиск...';\r\n\r\n  const [search, setSearch] = useState('');\r\n  const searchHandler = (event: React.KeyboardEvent<HTMLInputElement>) => {\r\n    setSearch(event.currentTarget.value);\r\n  }\r\n\r\n  return (\r\n    <aside className={style.contacts}>\r\n      <input className={style.search} placeholder={placeholderText} onKeyUp={searchHandler}></input>\r\n      <UserList search={search}/>\r\n    </aside>\r\n  );\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"dialog-content\":\"style_dialog-content__ICg9o\",\"info\":\"style_info__EqnC0\",\"history-delimier\":\"style_history-delimier__TMeq1\",\"delimier-text\":\"style_delimier-text__uBNhs\"};","// extracted by mini-css-extract-plugin\nexport default {\"message-container\":\"style_message-container__Tflpy\",\"current\":\"style_current__fYex7\",\"another\":\"style_another__1ZVqf\",\"message\":\"style_message__vtYZd\",\"header\":\"style_header__XYwMV\",\"text\":\"style_text__yn2vV\",\"footer\":\"style_footer__4XVvj\"};","import { useSelector } from 'react-redux';\r\nimport { Message } from '../../../../store/actions/dialog-actions';\r\nimport { RootState } from '../../../../store/store';\r\nimport style from './style.module.css';\r\nimport React from 'react';\r\n\r\ntype DialogMessageProps = {\r\n  message: Message;\r\n  innerRef?: React.RefObject<HTMLDivElement>\r\n};\r\n\r\nconst getStatus = (isDelivered: boolean, isReaded: boolean): string => {\r\n  const textSended = 'Отправлено';\r\n  const textDelivered = 'Доставлено';\r\n  const textReaded = 'Прочитано';\r\n\r\n  if (isReaded) {\r\n    return textReaded.toLowerCase();\r\n  }\r\n  if (isDelivered) {\r\n    return textDelivered.toLowerCase();\r\n  }\r\n\r\n  return textSended.toLowerCase();\r\n};\r\n\r\nexport const DialogMessage: React.FC<DialogMessageProps> = ({message, innerRef}) => {\r\n  const currentUserText = 'вы';\r\n\r\n  const currentUser = useSelector(\r\n    (state: RootState) => state.users.userCurrent.login\r\n  );\r\n\r\n  return (\r\n    <div ref={innerRef}\r\n      className={\r\n        currentUser === message.from\r\n          ? `${style['message-container']} ${style.current}`\r\n          : `${style['message-container']} ${style.another}`\r\n      }\r\n    >\r\n      <div className={style.message}>\r\n        <div className={style.header}>\r\n          <label>\r\n            {message.from === currentUser\r\n              ? currentUserText\r\n              : message.from}\r\n          </label>\r\n          <label>{new Date(message.datetime).toLocaleString()}</label>\r\n        </div>\r\n        <div className={style.text}>{message.text}</div>\r\n        {currentUser === message.from && (\r\n          <div className={style.footer}>\r\n            {getStatus(\r\n              message.status.isDelivered,\r\n              message.status.isReaded\r\n            )}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { DialogActions } from '../../store/constants/action-constants';\nimport { store } from '../../store/store';\nimport { sendMessage } from './send-message';\n\nexport const setReaded = () => {\n  const state = store.getState();\n  const selectedDialog = state.dialog.messages.filter(\n    (dialog) => dialog.login === state.dialog.selected\n  )[0];\n  if (selectedDialog) {\n    selectedDialog.messages.forEach((message) => {\n      if (\n        !message.status.isReaded &&\n        message.from !== state.users.userCurrent.login\n      ) {\n        const payload = {\n          id: message.id,\n        };\n        sendMessage(DialogActions.MSG_READED, payload);\n      }\n    });\n  }\n};\n","import { useSelector } from 'react-redux';\nimport style from './style.module.css';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { RootState } from '../../../../store/store';\nimport { Dialog, Message } from '../../../../store/actions/dialog-actions';\nimport { DialogMessage } from '../dialog-message/dialog-message';\nimport { setReaded } from '../../../../core/services/set-readed';\n\nconst getDialog = (login: string | null, dialogs: Dialog[]): Message[] => {\n  const result: Message[] = [];\n  dialogs.forEach((dialog) => {\n    if (dialog.login === login) {\n      result.push(...dialog.messages);\n    }\n  });\n  return result;\n};\n\nconst setScrollRef = (\n  ref: React.RefObject<HTMLDivElement>,\n  selectedUser: string | null,\n  message: Message,\n  index: number\n): React.RefObject<HTMLDivElement> | undefined => {\n  if (index === 0 && message.from === selectedUser) {\n    return ref;\n  }\n  if (message.from !== selectedUser) {\n    return ref;\n  }\n  return undefined;\n};\n\nexport const DialogContent: React.FC = () => {\n  const emptyHistoryText = 'Напишите ваше первое сообщение...';\n  const newHistoryText = 'Новые сообщения';\n  const selectUserText = 'Выберите пользователя для отправки сообщения...';\n\n  const selectedUser = useSelector((state: RootState) => state.dialog.selected);\n  const dialogs = useSelector((store: RootState) => store.dialog.messages);\n\n  const [oldDialogHistory, setOldDialogHistory] = useState(\n    new Array<Message>()\n  );\n  const [newDialogHistory, setNewDialogHistory] = useState(\n    new Array<Message>()\n  );\n  const [isShowDelimier, setShowDelimier] = useState(false);\n\n  useEffect(() => {\n    const currentDialog = getDialog(selectedUser, dialogs);\n    const oldMessages = currentDialog.filter(\n      (message) => message.status.isReaded !== false\n    );\n    const newMessages = currentDialog.filter(\n      (message) => message.status.isReaded === false\n    );\n    setOldDialogHistory(oldMessages);\n    setNewDialogHistory(newMessages);\n\n    if (newMessages.length > 0 && newMessages[0].from === selectedUser) {\n      setShowDelimier(true);\n    } else {\n      setShowDelimier(false);\n    }\n  }, [dialogs, selectedUser]);\n\n  const scrollRef = useRef<HTMLDivElement>(null);\n  const delimierRef = useRef<HTMLDivElement>(null);\n  useEffect(() => {\n    if (isShowDelimier) {\n      delimierRef.current?.scrollIntoView({ behavior: 'smooth' });\n    } else {\n      scrollRef.current?.scrollIntoView({ behavior: 'smooth' });\n    }\n  }, [isShowDelimier, delimierRef, scrollRef, newDialogHistory]);\n\n  return (\n    <article\n      className={style['dialog-content']}\n      onClick={setReaded}\n      onWheel={setReaded}\n      ref={delimierRef}\n    >\n      {selectedUser === null && (\n        <label className={style.info}>{selectUserText}</label>\n      )}\n      {selectedUser !== null &&\n        oldDialogHistory.length === 0 &&\n        newDialogHistory.length === 0 && (\n          <label className={style.info}>{emptyHistoryText}</label>\n        )}\n      {oldDialogHistory.map((message) => (\n        <DialogMessage message={message} key={message.id} />\n      ))}\n      {isShowDelimier && (\n        <div className={style['history-delimier']} ref={delimierRef}>\n          <label className={style['delimier-text']}>{newHistoryText}</label>\n        </div>\n      )}\n      {newDialogHistory.map((message, index) => (\n        <DialogMessage\n          message={message}\n          key={message.id}\n          innerRef={setScrollRef(scrollRef, selectedUser, message, index)}\n        />\n      ))}\n    </article>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"dialog-header\":\"style_dialog-header__XLReP\",\"user-active\":\"style_user-active__0VIus\",\"user-inactive\":\"style_user-inactive__h1zHf\"};","import { useSelector } from 'react-redux';\r\nimport style from './style.module.css';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { RootState } from '../../../../store/store';\r\n\r\nexport const DialogHeader: React.FC = () => {\r\n  const textActive = 'в сети';\r\n  const textInActive = 'не в сети';\r\n\r\n  const activeUser = useSelector((store: RootState) => store.users.usersAnother.active);\r\n\r\n  const selectedUser = useSelector((store: RootState) => store.dialog.selected);\r\n  const [active, setActive] = useState(false);\r\n  \r\n  useEffect(() => {\r\n    const isActive = activeUser.some((login) => login === selectedUser);\r\n    setActive(isActive);\r\n  }, [activeUser, selectedUser]);\r\n\r\n  return (\r\n    <article className={style['dialog-header']}>\r\n      <label>{selectedUser}</label>\r\n      {selectedUser && <label className={active ? style['user-active'] : style['user-inactive']}>\r\n        {active ? textActive : textInActive}\r\n      </label>}\r\n    </article>\r\n  );\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"dialog-input\":\"style_dialog-input__Y-F0x\",\"dialog-input-field\":\"style_dialog-input-field__3RzOS\",\"dialog-input-button\":\"style_dialog-input-button__32VBc\"};","import { useSelector } from 'react-redux';\r\nimport { sendMessage } from '../../../../core/services/send-message';\r\nimport Button from '../../../shared/button/Button';\r\nimport style from './style.module.css';\r\nimport React, { useState } from 'react';\r\nimport { RootState } from '../../../../store/store';\r\nimport { DialogActions } from '../../../../store/constants/action-constants';\r\nimport { setReaded } from '../../../../core/services/set-readed';\r\n\r\nexport const DialogInput: React.FC = () => {\r\n  const buttonText = 'Отправить';\r\n  const placeholderText = 'Сообщение...';\r\n\r\n  const selectedUser = useSelector((store: RootState) => store.dialog.selected);\r\n  const [message, setMessage ] = useState('');;\r\n\r\n  const inputChangeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setMessage(event.currentTarget.value);\r\n  }\r\n  const sendClickHandler = () => {\r\n    const payload = {\r\n      login: selectedUser,\r\n      text: message\r\n    }\r\n    sendMessage(DialogActions.MSG_SEND, payload);\r\n    setMessage('');\r\n    setReaded();\r\n  }\r\n  return (\r\n    <article className={style['dialog-input']}>\r\n      <input value={message} className={style['dialog-input-field']} placeholder={placeholderText} onChange={inputChangeHandler} disabled={selectedUser === null}></input>\r\n      <Button text={buttonText} callback={sendClickHandler} small={true} disabled={selectedUser === null || message === ''}/>\r\n    </article>\r\n  );\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"dialog-container\":\"style_dialog-container__ZlILo\"};","import { DialogContent } from './dialog-content/dialog-content';\r\nimport { DialogHeader } from './dialog-header/dialog-header';\r\nimport { DialogInput } from './dialog-input/dialog-input';\r\nimport style from './style.module.css';\r\nimport React from 'react';\r\n\r\nexport const Dialog: React.FC = () => {\r\n  return (\r\n    <article className={style['dialog-container']}>\r\n      <DialogHeader />\r\n      <DialogContent />\r\n      <DialogInput />\r\n    </article>\r\n  );\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"style_content__hTiAT\"};","import { Contacts } from '../contacts/contacts';\nimport { Dialog } from '../dialog/dialog';\nimport style from './style.module.css';\n\nexport const Content: React.FC = () => {\n  return (\n    <section className={style.content}>\n      <Contacts />\n      <Dialog />\n    </section>\n  );\n};\n","import style from './style.module.css';\nimport React from 'react';\nimport { Header } from './header/header';\nimport { Footer } from './footer/footer';\nimport { Content } from './content/content';\n\nconst Main: React.FC = () => {\n  return (\n    <main className={style.main}>\n      <Header />\n      <Content />\n      <Footer />\n    </main>\n  );\n};\n\nexport default Main;\n"],"names":["Header","user","useSelector","store","users","userCurrent","navigate","useNavigate","authCallback","pending","fullfilled","dispatch","logout","rejected","messageResult","authSendHandler","reset","useAuthorization","UserActions","LOGOUT","_jsxs","className","style","children","login","_jsx","Button","text","callback","small","Footer","UserContact","_ref","active","messages","onClick","clickHandler","selectUser","concat","getCountMessage","dialogs","result","forEach","dialog","Array","isArray","message","from","status","isReaded","UserList","search","usersCurrent","usersActive","usersAnother","usersInActive","inactive","map","index","indexOf","Contacts","setSearch","useState","placeholder","onKeyUp","event","currentTarget","value","DialogMessage","innerRef","currentUser","state","ref","Date","datetime","toLocaleString","isDelivered","toLowerCase","getStatus","setReaded","getState","selectedDialog","filter","selected","payload","id","sendMessage","DialogActions","MSG_READED","setScrollRef","selectedUser","DialogContent","oldDialogHistory","setOldDialogHistory","newDialogHistory","setNewDialogHistory","isShowDelimier","setShowDelimier","useEffect","currentDialog","getDialog","push","oldMessages","newMessages","length","scrollRef","useRef","delimierRef","_delimierRef$current","_scrollRef$current","current","scrollIntoView","behavior","onWheel","DialogHeader","activeUser","setActive","isActive","some","DialogInput","setMessage","onChange","disabled","sendClickHandler","MSG_SEND","Dialog","Content","Main"],"sourceRoot":""}